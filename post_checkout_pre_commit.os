#Использовать JSON
#Использовать 1commands
#Использовать gui
#Использовать gitrunner

Функция ПутьКРепозиторию()
    Возврат СтрЗаменить(СтартовыйСценарий().Каталог, ".git", "");
КонецФункции

Функция ПолучитьПараметрыОкружения(ИмяФайлаОкружения)
    ФайлОкружения                       =   Новый Файл(ИмяФайлаОкружения);
    Если
        не ФайлОкружения.Существует()
    Тогда
        Сообщить("Файл окружения не найден!");
        ЗавершитьРаботу(1);
    КонецЕсли;
    Чтение                              =   Новый ЧтениеТекста();
    Чтение.Открыть(ИмяФайлаОкружения, "utf-8");
    Парсер                              =   Новый ПарсерJSON();
    Окружение                           =   Парсер.ПрочитатьJSON(Чтение.Прочитать());
    Чтение.Закрыть();
    Возврат Окружение;    
КонецФункции

Процедура СоздатьХук(Хук, ПутьДоФайла, ИмяФайлаВызова, Метод)
    ХукФайл                             =   Новый ТекстовыйДокумент();
    ХукФайл.УстановитьТекст("#!/bin/sh" + Символы.ПС + "chcp.com 65001" + Символы.ПС + "oscript -encoding=utf-8 """ + ПутьДоФайла + "/.git/" + ИмяФайлаВызова + """ " + Метод);
    ХукФайл.Записать(ПутьДоФайла + "/.git/hooks/" + Хук, КодировкаТекста.UTF8NoBOM);
КонецПроцедуры

Процедура УдалитьХук(Хук, ПутьДоФайла)
    УдалитьФайлы(ПутьКРепозиторию() + "/.git/hooks/" + Хук);
КонецПроцедуры

ПонялПараметры                          =   АргументыКоманднойСтроки.найти("fromfile")    <> Неопределено
                                        ИЛИ АргументыКоманднойСтроки.найти("tofile")    <> Неопределено
                                        ИЛИ АргументыКоманднойСтроки.найти("install")    <> Неопределено
                                        ИЛИ АргументыКоманднойСтроки.найти("uninstall")    <> Неопределено
                                        ИЛИ АргументыКоманднойСтроки.найти("addfile")    <> Неопределено;
Если 
    Не ПонялПараметры
Тогда
    Сообщить("Не заданы параметры команды. Допустимы fromfile, tofile, install, uninstall, addfile");
    ЗавершитьРаботу(1);
КонецЕсли;

Действие                                =   АргументыКоманднойСтроки[0];

СиcтемныйФайл                           =   ПутьКРепозиторию() + "Syst.txt";
ИмяФайлаВызова                          =   "post_checkout_pre_commit.os";

Если
    Действие = "addfile"
Тогда
    СистФайл                            =   Новый ТекстовыйДокумент();
    СистФайл.УстановитьТекст("Последний коммит был " + Строка(ТекущаяДата()));
    СистФайл.Записать(СиcтемныйФайл, КодировкаТекста.UTF8NoBOM);
    Репозиторий                         =   Новый ГитРепозиторий();
    Репозиторий.УстановитьРабочийКаталог(ПутьКРепозиторию());
    Репозиторий.ДобавитьФайлВИндекс(СиcтемныйФайл);
    Сообщить(Репозиторий.ПолучитьВыводКоманды());
    ЗавершитьРаботу(0);
    
ИначеЕсли
    Действие = "install"
Тогда
    Если
        АргументыКоманднойСтроки.Количество() = 1
    Тогда
        Путь                            =   ТекущийКаталог();
    Иначе
        Путь                            =   АргументыКоманднойСтроки[1];
        КопироватьФайл(ТекущийКаталог() + "/" + ИмяФайлаВызова, Путь + "/.git/" + ИмяФайлаВызова);
    КонецЕсли;

    СоздатьХук("post-checkout"  , Путь, ИмяФайлаВызова, "fromfile");
    СоздатьХук("post-commit"    , Путь, ИмяФайлаВызова, "addfile");
    СоздатьХук("pre-commit"     , Путь, ИмяФайлаВызова, "tofile");
    Json                =   "{
    |    ""$schema"": ""https://raw.githubusercontent.com/vanessa-opensource/vanessa-runner/develop/vanessa-runner-schema.json"",
    |    ""default"": {
    |        ""--ibconnection""     :   ""/SИмя_Сервера\\Имя_Базы"",
    |        ""--ras""              :   ""Адрес RAS сервера"",
    |        ""--db-user""          :   ""User"", 
    |        ""--db-pwd""           :   ""Password"", 
    |        ""_comment""           :   ""Для доменной авторизации пользователь и пароль должны быть пустыми"",
    |        ""--root""             :   ""."",
    |        ""--workspace""        :   ""."",
    |        ""_comment2""          :   ""В поле v8version можно указать нужную версию, например 8.3.18"",
    |        ""--v8version""        :   """",
    |        ""--locale""           :   ""ru"",
    |        ""--language""         :   ""ru"",
    |        ""--additional""       :   ""/WA+ /DisplayAllFunctions /Lru  /iTaxi"",
    |        ""--ordinaryapp""      :   ""-1"",
    |        ""--uccode""           :   ""pas""
    |    }, 
    |    ""Настройки"": {
    |        ""ЭтоРасширение""      :   true,
    |        ""ИмяРасширения""      :   ""ИмяРасширения"",
    |        ""КаталогИсходников""  :   ""src""
    |    }
    |}";

    ЦелевойJSON                         =   Путь + "/.git/env.json";
    Env                                 =   Новый Файл(ЦелевойJSON);
    Если
        не Env.Существует()
    Тогда
        ДжсонФайл                       =   Новый ТекстовыйДокумент();
        ДжсонФайл.УстановитьТекст(Json);
        ДжсонФайл.Записать(ЦелевойJSON, КодировкаТекста.UTF8NoBOM);
    КонецЕсли;

    Сообщить("Хуки успешно установлены в каталог " + Путь);
    ЗавершитьРаботу(0);

ИначеЕсли
    Действие = "uninstall"
Тогда
    Если
        АргументыКоманднойСтроки.Количество() = 1
    Тогда
        Путь                            =   ТекущийКаталог();
    Иначе
        Путь                            =   АргументыКоманднойСтроки[1];
        Сообщить(Путь + "/" + ИмяФайлаВызова);
        УдалитьФайлы(Путь + "/" + ИмяФайлаВызова);
    КонецЕсли;

    УдалитьХук("post-checkout"  , Путь);
    УдалитьХук("post-commit"    , Путь);
    УдалитьХук("pre-commit"     , Путь);

    УдалитьФайлы(ПутьКРепозиторию() + "/.git/env.json");

    ФайлН                               =   Новый Файл(СиcтемныйФайл);

    Если
        ФайлН.Существует()
    Тогда
        УстановитьТекущийКаталог(Путь);
        Команда                         =   Новый Команда;
        Команда.УстановитьКоманду("git");
        Команда.ДобавитьПараметр("rm");
        Команда.ДобавитьПараметр("-f");
        Команда.ДобавитьПараметр(СиcтемныйФайл);
        Результат                       =   Команда.Исполнить();
        Сообщить(Команда.ПолучитьВывод());
    КонецЕсли;
    ЗавершитьРаботу(0);
КонецЕсли;

ИмяФайлаОкружения                       =   СтартовыйСценарий().Каталог + "/env.json";

Попытка
    Окружение                           =   ПолучитьПараметрыОкружения(ИмяФайлаОкружения);
    НастройкиПоУмолчанию                =   Окружение.Получить("default");

    Пользователь                        =   НастройкиПоУмолчанию.Получить("--db-user");
    ibconnection                        =   НастройкиПоУмолчанию.Получить("--ibconnection");
    Части                               =   СтрРазделить(СтрЗаменить(ibconnection, "/S", ""), "\\");
    СерверRAS                           =   НастройкиПоУмолчанию.Получить("--ras");

    ВопросБаза                          =   "(Srvr=""" + Части[0] + """;Ref=""" + Части[1] + """)";
    ВопросПользователь                  =   ?(Пользователь = "", "", " под пользователем " + Пользователь);
    Настройки                           =   Окружение.Получить("Настройки");
    ЭтоРасширение                       =   Настройки.Получить("ЭтоРасширение");

    Если 
        не ЗначениеЗаполнено(ЭтоРасширение)
    Тогда
        ВызватьИсключение "Не определен ЭтоРасширение";
    КонецЕсли;
    
    Если 
        ЭтоРасширение = Истина
    Тогда
        ИмяРасширения                   =   Настройки.Получить("ИмяРасширения");
        Если 
            не ЗначениеЗаполнено(ИмяРасширения)
        Тогда
            ВызватьИсключение "Не определен ИмяРасширения";
        КонецЕсли;
    КонецЕсли;
    
    Если 
        Действие = "fromfile"
    Тогда
        ВопросРасширениеКонфигурация    =   ?(ЭтоРасширение, "расширения " + ИмяРасширения, "конфигурации");
    ИначеЕсли
        Действие = "tofile"
    Тогда
        ВопросРасширениеКонфигурация    =   ?(ЭтоРасширение, "расширение " + ИмяРасширения, "конфигурацию");
    КонецЕсли;

    КаталогИсходников                   =   Настройки.Получить("КаталогИсходников");
    Если
        не СтрНайти(КаталогИсходников, ":") > 0
    Тогда
        КаталогИсходников               =   ПутьКРепозиторию() + КаталогИсходников;
        Если
            Действие = "fromfile"
        Тогда
            ConfigurationXML            =   Новый Файл(КаталогИсходников + "\configuration.xml");
            Если
                Не ConfigurationXML.Существует()
            Тогда
                КаталогИсходников       =   КаталогИсходников + "\" + ИмяРасширения;
                ConfigurationXML        =   Новый Файл(КаталогИсходников + "\configuration.xml");
                Если
                    Не ConfigurationXML.Существует()
                Тогда
                    ВызватьИсключение("В каталоге репозитория отсутствует файл Configuration.xml");
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
        
    Если 
        не ЗначениеЗаполнено(КаталогИсходников)
    Тогда
        ВызватьИсключение "Не определен КаталогИсходников";
    КонецЕсли;
Исключение
    Сообщить("Не удалось определить настройки из файла окружения");
    ЗавершитьРаботу(1);
КонецПопытки;

УправляемыйИнтерфейс                    =   Новый УправляемыйИнтерфейс();
Диалоги                                 =   УправляемыйИнтерфейс.СтандартныеДиалоги;

Если
    Действие = "fromfile"
Тогда
    Ответ                               =   Диалоги.Вопрос("Загрузить код " + ВопросРасширениеКонфигурация + " в базу " + ВопросБаза + ВопросПользователь + "?    .",
                                                            РежимДиалогаВопрос.ДаНет, , , "Вопрос");
    Если
        Ответ = КодВозвратаДиалога.Нет
    Тогда
        ЗавершитьРаботу(0);
    КонецЕсли;

ИначеЕсли
    Действие = "tofile"
Тогда
    Ответ                               =   Диалоги.Вопрос("Перед коммитом выгрузить " + ВопросРасширениеКонфигурация + " из базы " + ВопросБаза + "в файлы" + ВопросПользователь + "?    .",
                                                            РежимДиалогаВопрос.ДаНет, , , "Вопрос");
    Если
        Ответ = КодВозвратаДиалога.Нет
    Тогда
        ЗавершитьРаботу(0);
    КонецЕсли;

КонецЕсли;

Команда                                 =   Новый Команда;
Команда.УстановитьКоманду("vrunner");
Команда.ДобавитьПараметр("session kill --with-nolock");
Команда.ДобавитьПараметр("--filter appid=Designer");
Команда.ДобавитьПараметр("--db "        +   Части[1]);
Команда.ДобавитьПараметр("--ras "       +   СерверRAS);
Результат                               =   Команда.Исполнить();
Сообщить(Команда.ПолучитьВывод());
Если
    не результат = 0
Тогда
    ЗавершитьРаботу(Результат);
КонецЕсли; 

Команда                                 =   Новый Команда;
Если
    Действие = "fromfile"
Тогда
    Если
        ЭтоРасширение
    Тогда
        Команда.УстановитьКоманду("vrunner");
        Команда.ДобавитьПараметр("compileext");
        Команда.ДобавитьПараметр(КаталогИсходников);
        Команда.ДобавитьПараметр(ИмяРасширения);
        Команда.ДобавитьПараметр("--settings "  +   ИмяФайлаОкружения);
    Иначе
        Команда.УстановитьКоманду("vrunner");
        Команда.ДобавитьПараметр("compile");
        Команда.ДобавитьПараметр("--src");
        Команда.ДобавитьПараметр(КаталогИсходников);
        Команда.ДобавитьПараметр("-c");
        Команда.ДобавитьПараметр("--settings "  +   ИмяФайлаОкружения);
    КонецЕсли;

    Результат                           =   Команда.Исполнить();
    Сообщить(Команда.ПолучитьВывод());

    СистФайл                            =   Новый ТекстовыйДокумент();
    СистФайл.УстановитьТекст("Последнее переключение на ветку было " + Строка(ТекущаяДата()));
    СистФайл.Записать(СиcтемныйФайл, КодировкаТекста.UTF8NoBOM);

    Репозиторий                         =   Новый ГитРепозиторий();
    Репозиторий.УстановитьРабочийКаталог(ПутьКРепозиторию());
    Репозиторий.ДобавитьФайлВИндекс(СиcтемныйФайл);
    Сообщить(Репозиторий.ПолучитьВыводКоманды());

ИначеЕсли
    Действие = "tofile"
Тогда
    Команда                             =   Новый Команда;
    Если
        ЭтоРасширение
    Тогда
        Команда.УстановитьКоманду("vrunner");
        Команда.ДобавитьПараметр("decompileext");
        Команда.ДобавитьПараметр(ИмяРасширения);
        Команда.ДобавитьПараметр(КаталогИсходников);
        Команда.ДобавитьПараметр("--settings "  +   ИмяФайлаОкружения);
    Иначе
        Команда.УстановитьКоманду("vrunner");
        Команда.ДобавитьПараметр("decompile");
        Команда.ДобавитьПараметр("-o");
        Команда.ДобавитьПараметр(КаталогИсходников);
        Команда.ДобавитьПараметр("-c");
        Команда.ДобавитьПараметр("--settings "  +   ИмяФайлаОкружения);
    КонецЕсли;

    Результат                           =   Команда.Исполнить();

    Сообщить(Команда.ПолучитьВывод());
    Команда                             =   Новый Команда;
    Команда.УстановитьКоманду("git");
    Команда.ДобавитьПараметр("rm");
    Команда.ДобавитьПараметр("-f");
    Команда.ДобавитьПараметр(СиcтемныйФайл);

    Результат                           =   Команда.Исполнить();
    Сообщить(Команда.ПолучитьВывод());

    Репозиторий                         =   Новый ГитРепозиторий();
    Репозиторий.УстановитьРабочийКаталог(ПутьКРепозиторию());
    Репозиторий.ДобавитьФайлВИндекс(КаталогИсходников);
    Сообщить(Репозиторий.ПолучитьВыводКоманды());
Иначе
    Сообщить("Команда сборки не распознана");
    ЗавершитьРаботу(1);
КонецЕсли;
ЗавершитьРаботу(Результат);