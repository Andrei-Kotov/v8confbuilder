#Использовать JSON
#Использовать 1commands
#Использовать gui
#Использовать gitrunner

Функция ПолучитьПараметрыОкружения(ИмяФайлаОкружения)

	ФайлОкружения = НайтиФайлы(".", ИмяФайлаОкружения, Ложь);
	Если ФайлОкружения.Количество() = 0 Тогда
		Сообщить("Файл окружения не найден!");
		ЗавершитьРаботу(1);
	КонецЕсли;

	Чтение = Новый ЧтениеТекста();
	Чтение.Открыть(ИмяФайлаОкружения);

	Парсер = Новый ПарсерJSON();
	Окружение = Парсер.ПрочитатьJSON(Чтение.Прочитать());

	Чтение.Закрыть();

	Возврат Окружение;
	
КонецФункции

Процедура СоздатьХук(Хук, ПутьДоФайла, ИмяФайлаВызова, Метод)

	ХукФайл = Новый ТекстовыйДокумент();

	ХукФайл.УстановитьТекст("#!/bin/sh" + Символы.ПС + "chcp.com 65001" + Символы.ПС + "oscript -encoding=utf-8 """ + ПутьДоФайла + "/" + ИмяФайлаВызова + """ " + Метод);

	ХукФайл.Записать(ПутьДоФайла + "/.git/hooks/" + Хук, КодировкаТекста.UTF8NoBOM);

КонецПроцедуры

Процедура УдалитьХук(Хук, ПутьДоФайла)

	УдалитьФайлы(ПутьДоФайла + "/.git/hooks/" + Хук);

КонецПроцедуры

Если АргументыКоманднойСтроки.Количество() = 0 Тогда
	Сообщить("Не заданы параметры команды. Допустимы fromfile, tofile, install, uninstall, addfile");
	ЗавершитьРаботу(1);
КонецЕсли;

Действие = АргументыКоманднойСтроки[0];

СитемныйФайл = "Syst.txt";
ИмяФайлаВызова = "post_checkout_pre_commit.os";


Если Действие = "addfile" Тогда
	СистФайл = Новый ТекстовыйДокумент();

	СистФайл.УстановитьТекст("Последний коммит был " + Строка(ТекущаяДата()));

	СистФайл.Записать("./" + СитемныйФайл, КодировкаТекста.UTF8NoBOM);

	Репозиторий = Новый ГитРепозиторий();
	Репозиторий.УстановитьРабочийКаталог("./");
	Репозиторий.ДобавитьФайлВИндекс(СитемныйФайл);
	Сообщить(Репозиторий.ПолучитьВыводКоманды());

	ЗавершитьРаботу(0);
ИначеЕсли Действие = "install" Тогда

	Если АргументыКоманднойСтроки.Количество() = 1 Тогда
		Путь = ТекущийКаталог();
	Иначе
		Путь = АргументыКоманднойСтроки[1];
		КопироватьФайл(ТекущийКаталог() + "/" + ИмяФайлаВызова, Путь + "/" + ИмяФайлаВызова);
	КонецЕсли;

	СоздатьХук("post-checkout", Путь, ИмяФайлаВызова, "fromfile");
	СоздатьХук("post-commit", Путь, ИмяФайлаВызова, "addfile");
	СоздатьХук("pre-commit", Путь, ИмяФайлаВызова, "tofile");

	Json = "{
	|	""$schema"": ""https://raw.githubusercontent.com/vanessa-opensource/vanessa-runner/develop/vanessa-runner-schema.json"",
	|    ""default"": {
	|        ""--ibconnection"": ""/Server\\Base"",
	|        ""--db-user"": ""User"",
	|        ""--db-pwd"": ""Password"",
	|        ""--root"": ""."",
	|        ""--workspace"": ""."",
	|        ""--v8version"": ""8.3.18"",
	|        ""--locale"": ""ru"",
	|        ""--language"": ""ru"",
	|        ""--additional"": ""/WA+ /DisplayAllFunctions /Lru  /iTaxi"",
	|        ""--ordinaryapp"": ""-1"",
	|        ""--uccode"": ""pas""
	|    }, 
	|    ""Настройки"": {
	|        ""ЭтоРасширение"": true,
	|        ""ИмяРасширения"": ""ИмяРасширения"",
	|        ""КаталогИсходников"": ""src""
	|    }
	|}";

	ДжсонФайл = Новый ТекстовыйДокумент();

	ДжсонФайл.УстановитьТекст(Json);

	ДжсонФайл.Записать(Путь + "/env.json", КодировкаТекста.UTF8NoBOM);

	ЗавершитьРаботу(0);
ИначеЕсли Действие = "uninstall" Тогда

	Если АргументыКоманднойСтроки.Количество() = 1 Тогда
		Путь = ТекущийКаталог();
	Иначе
		Путь = АргументыКоманднойСтроки[1];
		Сообщить(Путь + "/" + ИмяФайлаВызова);
		УдалитьФайлы(Путь + "/" + ИмяФайлаВызова);
	КонецЕсли;

	УдалитьХук("post-checkout", Путь);
	УдалитьХук("post-commit", Путь);
	УдалитьХук("pre-commit", Путь);

	УдалитьФайлы(Путь + "/env.json");

	ФайлН = Новый Файл(Путь + "/" + СитемныйФайл);

	Если ФайлН.Существует() Тогда
		УстановитьТекущийКаталог(Путь);
		Команда = Новый Команда;
		Команда.УстановитьКоманду("git");
		Команда.ДобавитьПараметр("rm");
		Команда.ДобавитьПараметр("-f");
		Команда.ДобавитьПараметр(СитемныйФайл);

		Результат = Команда.Исполнить();

		Сообщить(Команда.ПолучитьВывод());
	КонецЕсли;

	ЗавершитьРаботу(0);
КонецЕсли;

ИмяФайлаОкружения = "./env.json";

Попытка
	Окружение = ПолучитьПараметрыОкружения(ИмяФайлаОкружения);

	НастройкиПоУмолчанию = Окружение.Получить("default");

	Пользователь = НастройкиПоУмолчанию.Получить("--db-user");
	СтрПодключения  = СтрЗаменить(НастройкиПоУмолчанию.Получить("--ibconnection"),"/S","");
	Части		= СтрРазделить(СтрПодключения,"\\");
	ВопросБаза = "(Srvr=""" + Части[0] + """;Ref=""" + Части[1] + """)";
	ВопросПользователь = ?(Пользователь = "", "", " под пользователем " + Пользователь);

	Настройки = Окружение.Получить("Настройки");

	ЭтоРасширение = Настройки.Получить("ЭтоРасширение");
	Если не ЗначениеЗаполнено(ЭтоРасширение) Тогда
		ВызватьИсключение "Не определен ЭтоРасширение";
	КонецЕсли;

	Если ЭтоРасширение = Истина Тогда
		ИмяРасширения = Настройки.Получить("ИмяРасширения");
		Если не ЗначениеЗаполнено(ИмяРасширения) Тогда
			ВызватьИсключение "Не определен ИмяРасширения";
		КонецЕсли;
	КонецЕсли;

	Если Действие = "fromfile" Тогда
		ВопросРасширениеКонфигурация = ?(ЭтоРасширение, "расширения " + ИмяРасширения, "конфигурации");
	ИначеЕсли Действие = "tofile" Тогда
		ВопросРасширениеКонфигурация = ?(ЭтоРасширение, "расширение " + ИмяРасширения, "конфигурацию");
	КонецЕсли;

	КаталогИсходников = Настройки.Получить("КаталогИсходников");
	Если не ЗначениеЗаполнено(КаталогИсходников) Тогда
		ВызватьИсключение "Не определен КаталогИсходников";
	КонецЕсли;
Исключение
	Сообщить("Не удалось определить настройки из файла окружения");
	ЗавершитьРаботу(1);
КонецПопытки;

УправляемыйИнтерфейс = Новый УправляемыйИнтерфейс();
Диалоги = УправляемыйИнтерфейс.СтандартныеДиалоги;

Если Действие = "fromfile" Тогда

	Ответ = Диалоги.Вопрос("Загрузить данные " + ВопросРасширениеКонфигурация + " в базу " + ВопросБаза + ВопросПользователь + "?    .",РежимДиалогаВопрос.ДаНет, , , "Вопрос");
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ЗавершитьРаботу(0);
	КонецЕсли;

ИначеЕсли Действие = "tofile" Тогда

	Ответ = Диалоги.Вопрос("Перед коммитом выгрузить " + ВопросРасширениеКонфигурация + " из базы " + ВопросБаза + "в файлы" + ВопросПользователь + "?    .",РежимДиалогаВопрос.ДаНет, , , "Вопрос");
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ЗавершитьРаботу(0);
	КонецЕсли;

КонецЕсли;

Команда 	= Новый Команда;
Команда.УстановитьКоманду("vrunner");
Команда.ДобавитьПараметр("session kill --with-nolock");
Команда.ДобавитьПараметр("--filter appid=Designer");
Команда.ДобавитьПараметр("--db "+Части[1]);
Команда.ДобавитьПараметр("--ras "+Части[0]);
Результат 	= Команда.Исполнить();
Сообщить(Команда.ПолучитьВывод());
Если не результат = 0 Тогда
    ЗавершитьРаботу(Результат);
КонецЕсли; 

Если Действие = "fromfile" Тогда

	Если ЭтоРасширение Тогда
		Команда = Новый Команда;
		Команда.УстановитьКоманду("vrunner");
		Команда.ДобавитьПараметр("compileext");
		Команда.ДобавитьПараметр(КаталогИсходников);
		Команда.ДобавитьПараметр(ИмяРасширения);
	Иначе
		Команда = Новый Команда;
		Команда.УстановитьКоманду("vrunner");
		Команда.ДобавитьПараметр("compile");
		Команда.ДобавитьПараметр("--src");
		Команда.ДобавитьПараметр(КаталогИсходников);
		Команда.ДобавитьПараметр("-c");
	КонецЕсли;

	Результат = Команда.Исполнить();
	Сообщить(Команда.ПолучитьВывод());

	СистФайл = Новый ТекстовыйДокумент();

	СистФайл.УстановитьТекст("Последнее переключение на ветку было " + Строка(ТекущаяДата()));

	СистФайл.Записать("./" + СитемныйФайл, КодировкаТекста.UTF8NoBOM);

	Репозиторий = Новый ГитРепозиторий();
	Репозиторий.УстановитьРабочийКаталог("./");
	Репозиторий.ДобавитьФайлВИндекс(СитемныйФайл);
	Сообщить(Репозиторий.ПолучитьВыводКоманды());

ИначеЕсли Действие = "tofile" Тогда

	Если ЭтоРасширение Тогда
		Команда = Новый Команда;
		Команда.УстановитьКоманду("vrunner");
		Команда.ДобавитьПараметр("decompileext");
		Команда.ДобавитьПараметр(ИмяРасширения);
		Команда.ДобавитьПараметр(КаталогИсходников);
	Иначе
		Команда = Новый Команда;
		Команда.УстановитьКоманду("vrunner");
		Команда.ДобавитьПараметр("decompile");
		Команда.ДобавитьПараметр("-o");
		Команда.ДобавитьПараметр(КаталогИсходников);
		Команда.ДобавитьПараметр("-c");
	КонецЕсли;

	Результат = Команда.Исполнить();

	Сообщить(Команда.ПолучитьВывод());

	Команда = Новый Команда;
	Команда.УстановитьКоманду("git");
	Команда.ДобавитьПараметр("rm");
	Команда.ДобавитьПараметр("-f");
	Команда.ДобавитьПараметр(СитемныйФайл);

	Результат = Команда.Исполнить();

	Сообщить(Команда.ПолучитьВывод());

	Репозиторий = Новый ГитРепозиторий();
	Репозиторий.УстановитьРабочийКаталог("./");
	Репозиторий.ДобавитьФайлВИндекс(КаталогИсходников);
	Сообщить(Репозиторий.ПолучитьВыводКоманды());

Иначе
	Сообщить("Команда сборки не распознана");
	ЗавершитьРаботу(1);

КонецЕсли;

ЗавершитьРаботу(Результат);